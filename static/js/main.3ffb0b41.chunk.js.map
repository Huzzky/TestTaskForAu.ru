{"version":3,"sources":["components/User/UserStatus.js","components/User/User.js","components/User/UserPage.js","components/Cities/SelectorCities.js","components/Cities/City.js","components/FieldsPassword/FieldsPasswords.js","components/FieldEmail/FieldEmail.js","components/btnSendForm/btnSendForm.js","components/FillingForm.js","components/App.js","components/api/user.js","components/api/cities.js","reportWebVitals.js","index.js"],"names":["UserStatus","params","className","status","User","user","ref","React","createRef","useState","changeStatusChoice","setChangeStatusChoice","disable","setDisable","Status","setStatus","temporaryStatus","setTemporaryStatus","name","inpChangeStatusUser","type","maxLength","placeholder","onChange","e","current","value","length","onClick","console","log","user_number","new_status","disabled","Fragment","UserPage","this","props","Component","SelectorCities","count","arrCitiesBig","normalListCities","cities","map","index","parseInt","population","push","city","optionCities","key","choiceCity","currentTarget","City","FieldsPasswords","password","setPassword","refp1","refp2","refInput","refInputSecondPassword","checkPasswordInput","id","textContent","correctPassword","onBlur","FieldEmail","refPEmail","refInputEmail","readingEmail","email","correctEmail","test","String","toLowerCase","BtnSendForm","formattingDate","date","toLocaleString","day","month","year","hour","minute","second","parseDateSave","check","dateObject","Date","lastSave","now","lastSaveDate","setLastSaveDate","disabledBtn","event","preventDefault","user_id","user_city","user_password","user_email","last_save","checked_info_email","checkedInfoEmail","FillingForm","checkPassword","checkEmail","mostCityPopul","setCity","unCorrectPassword","setUnCorrectPassword","unCorrectEmail","setUnCorrectEmail","setEmail","checkedBox","setCheckedBox","booleanAnswer","checked","App","arrCity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ffb0b41.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles/status.scss'\r\n\r\nexport const UserStatus = (params) => {\r\n    return (\r\n        <div className=\"status\">\r\n            <div className=\"status__block\">\r\n                <div className=\"status__block_up\"></div>\r\n                <p className=\"status__status_text\">{params.status}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport '../styles/User.scss'\r\nimport { UserStatus } from './UserStatus'\r\n\r\nexport const User = (user) => {\r\n    let ref = React.createRef()\r\n    const [changeStatusChoice, setChangeStatusChoice] = useState(false)\r\n    const [disable, setDisable] = useState('')\r\n    const [Status, setStatus] = useState(user.user.status)\r\n    const [temporaryStatus, setTemporaryStatus] = useState(user.user.status)\r\n    const User = user.user.name\r\n\r\n    const choiceChangeStatus = () => {\r\n        if (!changeStatusChoice) {\r\n            return <UserStatus status={Status} />\r\n        } else {\r\n            return inpChangeStatusUser(Status)\r\n        }\r\n    }\r\n\r\n    const disabledDefinition = (e) => {\r\n        if (e.length <= 46) {\r\n            setDisable('')\r\n        } else if (e.length > 46) {\r\n            setDisable('disabled')\r\n        }\r\n    }\r\n\r\n    const inpChangeStatusUser = (status) => {\r\n        return (\r\n            <div className=\"status\">\r\n                <div className=\"status__block--inputStatus\">\r\n                    <div className=\"status__block_up--inputStatus\"></div>\r\n                    <input\r\n                        className=\"status__inp_status_user\"\r\n                        type=\"text\"\r\n                        maxLength=\"46\"\r\n                        name=\"status\"\r\n                        placeholder=\"Введите свой новый статус\"\r\n                        ref={ref}\r\n                        onChange={() => {\r\n                            setTemporaryStatus(ref.current.value)\r\n                            disabledDefinition(ref.current.value)\r\n                        }}\r\n                        value={temporaryStatus}\r\n                    />\r\n                    <div className=\"status__panel_btn\">\r\n                        <button\r\n                            className=\"status__btn_status status__btn_status--save\"\r\n                            onClick={() => {\r\n                                setChangeStatusChoice(false)\r\n                                setStatus(ref.current.value)\r\n                                console.log({\r\n                                    type: 'CHANGE_STATUS',\r\n                                    user: {\r\n                                        user_number: User,\r\n                                        new_status: ref.current.value,\r\n                                    },\r\n                                })\r\n                            }}\r\n                            disabled={disable}\r\n                        >\r\n                            Изменить\r\n                        </button>\r\n                        <button\r\n                            onClick={() => {\r\n                                setTemporaryStatus(Status)\r\n                                setChangeStatusChoice(false)\r\n                            }}\r\n                            className=\"status__btn_status status__btn_status--cancel\"\r\n                        >\r\n                            Отменить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"User\">\r\n                <div className=\"name-user\">\r\n                    <div>\r\n                        <p className=\"name-user__user\">\r\n                            <span className=\"name-user__span\">\r\n                                Здравствуйте,\r\n                            </span>{' '}\r\n                            Человек №{User}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"name-user__btnChangeStatus\">\r\n                        <p\r\n                            className=\"name-user__changeStatus\"\r\n                            onClick={() => setChangeStatusChoice(true)}\r\n                        >\r\n                            Сменить статус\r\n                        </p>\r\n                        <div className=\"name-user__line\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {choiceChangeStatus()}\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { User } from './User'\r\n\r\nexport default class UserPage extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card-user\">\r\n                <User user={this.props.user.user} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport const SelectorCities = (params) => {\r\n    let count = []\r\n    let arrCitiesBig = []\r\n    let normalListCities = []\r\n\r\n    params.cities.map((index) => {\r\n        if (parseInt(index.population) > 50000) {\r\n            arrCitiesBig.push(index)\r\n            if (count.length === 0) {\r\n                count = index\r\n            } else {\r\n                if (count.population < parseInt(index.population)) {\r\n                    count = index\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    })\r\n\r\n    normalListCities.push(count.city)\r\n    arrCitiesBig.map((index) => {\r\n        if (index.city === normalListCities[0]) {\r\n        } else {\r\n            normalListCities.push(index.city)\r\n        }\r\n        return true\r\n    })\r\n\r\n    let optionCities = normalListCities.map((index, key) => {\r\n        return (\r\n            <option key={key} value={index}>\r\n                {index}\r\n            </option>\r\n        )\r\n    })\r\n\r\n    const changeOption = (e) => {\r\n        params.choiceCity(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <select onChange={changeOption} className=\"field-city__select\">\r\n                {optionCities}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { SelectorCities } from './SelectorCities'\r\nimport '../styles/City.scss'\r\n\r\nexport default class City extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"field-city\">\r\n                <div className=\"field-city__div-h2\">\r\n                    <h2 className=\"field-city__h2\">Ваш город</h2>\r\n                </div>\r\n                <div className=\"field-city__selector\">\r\n                    <SelectorCities\r\n                        choiceCity={this.props.choiceCity}\r\n                        cities={this.props.cities}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport '../styles/Passwords.scss'\r\n\r\nexport const FieldsPasswords = (params) => {\r\n    const [password, setPassword] = useState('')\r\n    let refp1 = React.createRef()\r\n    let refp2 = React.createRef()\r\n    let refInput = React.createRef()\r\n    let refInputSecondPassword = React.createRef()\r\n\r\n    const checkPasswordInput = (e) => {\r\n        if (e.currentTarget.id === '1') {\r\n            if (e.currentTarget.value === '') {\r\n                refp1.current.textContent = 'Укажите пароль'\r\n                refp1.current.className = 'field-input__p--first--red'\r\n                e.currentTarget.className = 'field-input__first-p-input--red'\r\n\r\n                params.correctPassword(false)\r\n            } else if (e.currentTarget.value.length < 5) {\r\n                refp1.current.textContent = 'Используйте не менее 5 символов'\r\n                refp1.current.className = 'field-input__p--first--red'\r\n                e.currentTarget.className = 'field-input__first-p-input--red'\r\n\r\n                params.correctPassword(false)\r\n            } else if (\r\n                refInputSecondPassword.current.value !==\r\n                    e.currentTarget.value &&\r\n                refInputSecondPassword.current.value.length > 1\r\n            ) {\r\n                setPassword(e.currentTarget.value)\r\n\r\n                refp2.current.textContent = 'Пароли не совпадают'\r\n                refp2.current.className = 'field-input__p--second--red'\r\n                refInputSecondPassword.current.className =\r\n                    'field-input__second-p-input--red'\r\n            } else {\r\n                refp1.current.textContent = ''\r\n                refp1.current.className = 'field-input__p--first--no-red'\r\n                e.currentTarget.className = 'field-input__first-p-input'\r\n                refp2.current.className = 'field-input__p--second--no-red'\r\n                refInputSecondPassword.current.className =\r\n                    'field-input__second-p-input'\r\n                refp2.current.textContent = ''\r\n\r\n                setPassword(e.currentTarget.value)\r\n                params.correctPassword(false)\r\n            }\r\n        } else if (e.currentTarget.id === '2') {\r\n            if (e.currentTarget.value === '' && refInput.current.value === '') {\r\n                refp2.current.textContent = 'Укажите пароль'\r\n                refp2.current.className = 'field-input__p--second--red'\r\n                refp1.current.className = 'field-input__p--first--red'\r\n                e.currentTarget.className = 'field-input__first-p-input--red'\r\n                refp1.current.textContent = 'Укажите пароль'\r\n                refInput.current.className = 'field-input__first-p-input--red'\r\n\r\n                params.correctPassword(false)\r\n            } else if (e.currentTarget.value === '') {\r\n                refp2.current.textContent = 'Укажите пароль'\r\n                refp2.current.className = 'field-input__p--second--red'\r\n                e.currentTarget.className = 'field-input__second-p-input--red'\r\n\r\n                params.correctPassword(false)\r\n            } else if (e.currentTarget.value !== password) {\r\n                refp2.current.textContent = 'Пароли не совпадают'\r\n                refp2.current.className = 'field-input__p--second--red'\r\n                e.currentTarget.className = 'field-input__second-p-input--red'\r\n\r\n                params.correctPassword(false)\r\n            } else if (e.currentTarget.value === password) {\r\n                refp2.current.className = 'field-input__p--second--no-red'\r\n                e.currentTarget.className = 'field-input__second-p-input'\r\n                refp2.current.textContent = ''\r\n\r\n                params.correctPassword(true, password)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"fields-passwords\">\r\n            <div className=\"fields-passwords__first-password-block\">\r\n                <h2 className=\"fields-passwords__h2\">Пароль</h2>\r\n                <div className=\"fields-passwords__field-input field-input\">\r\n                    <input\r\n                        className=\"field-input__first-p-input\"\r\n                        type=\"password\"\r\n                        onBlur={checkPasswordInput}\r\n                        onChange={checkPasswordInput}\r\n                        id=\"1\"\r\n                        ref={refInput}\r\n                    />\r\n                    <p\r\n                        className=\"field-input__p--first--no-red\"\r\n                        id=\"1\"\r\n                        ref={refp1}\r\n                    ></p>\r\n                </div>\r\n                <div className=\"fields-passwords__desc-first\">\r\n                    <p>\r\n                        Ваш новый пароль должен содержать не менее 5 символов.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"fields-passwords__second-password-block\">\r\n                <h2 className=\"fields-passwords__h2\">Пароль еще раз</h2>\r\n                <div className=\"fields-passwords__field-input field-input\">\r\n                    <input\r\n                        className=\"field-input__second-p-input\"\r\n                        type=\"password\"\r\n                        onBlur={checkPasswordInput}\r\n                        onChange={checkPasswordInput}\r\n                        id=\"2\"\r\n                        ref={refInputSecondPassword}\r\n                    />\r\n                    <p\r\n                        className=\"field-input__p--second--no-red\"\r\n                        id=\"2\"\r\n                        ref={refp2}\r\n                    ></p>\r\n                </div>\r\n                <div className=\"fields-passwords__desc-second\">\r\n                    <p>\r\n                        Повторите пароль, пожалуйста, это обезопасит вас с нами\r\n                        на случай ошибки.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../styles/Email.scss'\r\n\r\nexport const FieldEmail = (params) => {\r\n    let refPEmail = React.createRef()\r\n    let refInputEmail = React.createRef()\r\n    const readingEmail = (e) => {\r\n        if (e.currentTarget.value === '') {\r\n            refPEmail.current.textContent = 'Укажите E-mail'\r\n            refPEmail.current.className = 'block-input__p-email--red'\r\n            refInputEmail.current.className = 'block-input__input-email--red'\r\n\r\n            params.correctEmail(false)\r\n        } else if (validateEmail(e.currentTarget.value) === false) {\r\n            refPEmail.current.textContent = 'Неверный E-mail'\r\n            refPEmail.current.className = 'block-input__p-email--red'\r\n            refInputEmail.current.className = 'block-input__input-email--red'\r\n\r\n            params.correctEmail(false)\r\n        } else {\r\n            refPEmail.current.textContent = ''\r\n            refPEmail.current.className = 'block-input__p-email'\r\n            refInputEmail.current.className = 'block-input__input-email'\r\n\r\n            params.correctEmail(true, e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    function validateEmail(email) {\r\n        const re = /^(([^<>()\\\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        return re.test(String(email).toLowerCase())\r\n    }\r\n    return (\r\n        <div className=\"card-email\">\r\n            <h2 className=\"card-email__h2\">Электронная почта</h2>\r\n            <div className=\"card-email__block-input block-input\">\r\n                <input\r\n                    className=\"block-input__input-email\"\r\n                    type=\"email\"\r\n                    onChange={readingEmail}\r\n                    onBlur={readingEmail}\r\n                    ref={refInputEmail}\r\n                />\r\n                <p ref={refPEmail} className=\"block-input__p-email\"></p>\r\n            </div>\r\n            <div className=\"card-email__block-p\">\r\n                <p>Можно изменить адрес, указанный при регистрации. </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport '../styles/BlockSendForm.scss'\r\n\r\nexport const BtnSendForm = (params) => {\r\n  const formattingDate = (date) => {\r\n    const months = [\r\n      'января',\r\n      'февраля',\r\n      'марта',\r\n      'апреля',\r\n      'мая',\r\n      'июня',\r\n      'июля',\r\n      'августа',\r\n      'сентября',\r\n      'октабря',\r\n      'ноября',\r\n      'декабря',\r\n    ]\r\n    return (\r\n      date.toLocaleString('ru', { day: 'numeric' }) +\r\n      ' ' +\r\n      months[date.toLocaleString('ru', { month: 'numeric' }) - 1] +\r\n      ' ' +\r\n      date.toLocaleString('ru', { year: 'numeric' }) +\r\n      ' в ' +\r\n      date.toLocaleString('ru', { hour: 'numeric' }) +\r\n      ':' +\r\n      date.toLocaleString('ru', { minute: 'numeric' }) +\r\n      ':' +\r\n      (parseInt(date.toLocaleString('ru', { second: 'numeric' }).length < 2)\r\n        ? '0' + date.toLocaleString('ru', { second: 'numeric' })\r\n        : date.toLocaleString('ru', { second: 'numeric' }))\r\n    )\r\n  }\r\n\r\n  const parseDateSave = (check) => {\r\n    if (check === 'default') {\r\n      const dateObject = new Date(params.lastSave)\r\n\r\n      return formattingDate(dateObject)\r\n    } else if (check === 'update') {\r\n      const dateObject = new Date(Date.now())\r\n\r\n      return formattingDate(dateObject)\r\n    }\r\n  }\r\n\r\n  const sendForm = (event) => {\r\n    event.preventDefault()\r\n    setLastSaveDate(parseDateSave('update'))\r\n    console.log({\r\n      type: 'CHANGE_INFO_USER',\r\n      user: {\r\n        user_id: params.user,\r\n        user_city: params.city,\r\n        user_password: params.password,\r\n        user_email: params.email,\r\n        last_save: Date.now(),\r\n        checked_info_email: params.checkedInfoEmail,\r\n      },\r\n    })\r\n\r\n    return false\r\n  }\r\n\r\n  const [lastSaveDate, setLastSaveDate] = useState(parseDateSave('default'))\r\n  return (\r\n    <div className=\"block-send-form\">\r\n      <div></div>\r\n      <input\r\n        className=\"block-send-form__input-btn-send\"\r\n        type=\"submit\"\r\n        disabled={params.disabledBtn}\r\n        onClick={sendForm}\r\n        value=\"Изменить\"\r\n      />\r\n      <p className=\"block-send-form__p-date-last-save\">\r\n        Последние изменения {lastSaveDate}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport City from './Cities/City'\r\nimport './styles/FieldCheckbox.scss'\r\nimport './styles/Form.scss'\r\nimport { FieldsPasswords } from './FieldsPassword/FieldsPasswords'\r\nimport { FieldEmail } from './FieldEmail/FieldEmail'\r\nimport { BtnSendForm } from './btnSendForm/btnSendForm'\r\n\r\nexport const FillingForm = (params) => {\r\n    const selectedCity = (value) => {\r\n        setCity(value)\r\n    }\r\n    const mostCityPopul = () => {\r\n        let count = []\r\n\r\n        params.city.map((index) => {\r\n            if (count.length === 0) {\r\n                count = index\r\n            } else {\r\n                if (count.population < parseInt(index.population)) {\r\n                    count = index\r\n                }\r\n            }\r\n            return true\r\n        })\r\n\r\n        return count.city\r\n    }\r\n\r\n    const correctPassword = (booleanAnswer, password) => {\r\n        setUnCorrectPassword(!booleanAnswer)\r\n        if (booleanAnswer) {\r\n            setPassword(password)\r\n            return !booleanAnswer\r\n        } else {\r\n            return booleanAnswer\r\n        }\r\n    }\r\n\r\n    const correctEmail = (booleanAnswer, email) => {\r\n        setUnCorrectEmail(!booleanAnswer)\r\n        if (booleanAnswer) {\r\n            setEmail(email)\r\n            return !booleanAnswer\r\n        } else {\r\n            return booleanAnswer\r\n        }\r\n    }\r\n\r\n    const [city, setCity] = useState(mostCityPopul())\r\n    const [unCorrectPassword, setUnCorrectPassword] = useState(true)\r\n    const [unCorrectEmail, setUnCorrectEmail] = useState(true)\r\n    const [password, setPassword] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [checkedBox, setCheckedBox] = useState(false)\r\n\r\n    const validateBtn = (checkPassword, checkEmail) => {\r\n        if (!checkPassword && !checkEmail) {\r\n            return ''\r\n        } else {\r\n            return 'disabled'\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <form className=\"block-form-grid\">\r\n                <City choiceCity={selectedCity} cities={params.city} />\r\n                <hr />\r\n                <FieldsPasswords correctPassword={correctPassword} />\r\n                <hr />\r\n                <FieldEmail correctEmail={correctEmail} />\r\n                <div className=\"block-checkbox\">\r\n                    <h2 className=\"block-checkbox__title-h2\">Я согласен</h2>\r\n                    <div className=\"block-checkbox__block-input block-input\">\r\n                        <input\r\n                            className=\"block-input__checkbox-info\"\r\n                            type=\"checkbox\"\r\n                            onClick={(event) =>\r\n                                setCheckedBox(event.currentTarget.checked)\r\n                            }\r\n                        />\r\n                        <p className=\"block-input__desc-check\">\r\n                            принимать актуальную информацию на емейл\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <React.Fragment>\r\n                    <BtnSendForm\r\n                        user={params.user.user.name}\r\n                        city={city}\r\n                        password={password}\r\n                        email={email}\r\n                        checkedInfoEmail={checkedBox}\r\n                        disabledBtn={validateBtn(\r\n                            unCorrectPassword,\r\n                            unCorrectEmail\r\n                        )}\r\n                        lastSave={params.user.user.last_save}\r\n                    />\r\n                </React.Fragment>\r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import getUser from './api/user'\r\nimport './styles/App.css'\r\nimport UserPage from './User/UserPage'\r\nimport getCity from './api/cities'\r\nimport { FillingForm } from './FillingForm'\r\n\r\nfunction App() {\r\n    let user = getUser()[0]\r\n    let arrCity = getCity()\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <UserPage user={user} />\r\n                <FillingForm city={arrCity} user={user} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","export default function getUser() {\r\n    return [\r\n        {\r\n            user: {\r\n                name: '3596941',\r\n                status: 'Прежде, чем действовать, надо понять',\r\n                last_save: 1337093717000,\r\n            },\r\n        },\r\n    ]\r\n}\r\n","export default function getCity() {\r\n    return [\r\n        {\r\n            city: 'Артёмовск',\r\n            population: '1688',\r\n        },\r\n        {\r\n            city: 'Ачинск',\r\n            population: '105259',\r\n        },\r\n        {\r\n            city: 'Боготол',\r\n            population: '19819',\r\n        },\r\n        {\r\n            city: 'Бородино',\r\n            population: '16061',\r\n        },\r\n        {\r\n            city: 'Дивногорск',\r\n            population: '29195',\r\n        },\r\n        {\r\n            city: 'Дудинка',\r\n            population: '21015',\r\n        },\r\n        {\r\n            city: 'Енисейск',\r\n            population: '17805',\r\n        },\r\n        {\r\n            city: 'Железногорск',\r\n            population: '83857',\r\n        },\r\n        {\r\n            city: 'Заозёрный',\r\n            population: '10286',\r\n        },\r\n        {\r\n            city: 'Зеленогорск',\r\n            population: '61915',\r\n        },\r\n        {\r\n            city: 'Игарка',\r\n            population: '4417',\r\n        },\r\n        {\r\n            city: 'Иланский',\r\n            population: '14967',\r\n        },\r\n        {\r\n            city: 'Канск',\r\n            population: '89111',\r\n        },\r\n        {\r\n            city: 'Кодинск',\r\n            population: '15911',\r\n        },\r\n        {\r\n            city: 'Красноярск',\r\n            population: '1095286',\r\n        },\r\n        {\r\n            city: 'Лесосибирск',\r\n            population: '59525',\r\n        },\r\n        {\r\n            city: 'Минусинск',\r\n            population: '68007',\r\n        },\r\n        {\r\n            city: 'Назарово',\r\n            population: '49825',\r\n        },\r\n        {\r\n            city: 'Норильск',\r\n            population: '179554',\r\n        },\r\n        {\r\n            city: 'Сосновоборск',\r\n            population: '40614',\r\n        },\r\n        {\r\n            city: 'Ужур',\r\n            population: '15563',\r\n        },\r\n        {\r\n            city: 'Уяр',\r\n            population: '11981',\r\n        },\r\n        {\r\n            city: 'Шарыпово',\r\n            population: '37136',\r\n        },\r\n    ]\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}